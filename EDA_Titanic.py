# -*- coding: utf-8 -*-
"""Assignment 2 Dibimbing.id Data Science - Elsa Riesta Alika

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lzdytDe2Peyvb1o9-yxY1TbiyH-fVcTI

## Investigasi sampel data titanic berikut dengan cara :
1. Cek secara head, tail, sample, info lalu observasi apa yang bisa anda peroleh ?
2. Lakukan Statistical Summary dengan mengekstrak informasi yang didapat dari observasi anda ?
3. Cek apakah ada duplikat dan bagaimana handlenya ?
4. Cek apakah ada missing value, berapa persentasenya jika ada, dan bagaimana cara handlenya ?

## Import Libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
pd.set_option("display.max_columns", None)
pd.set_option("display.max_rows", None)

# import data
df = pd.read_excel('titanic.xlsx')
df.head()

df.tail()

df.sample(5)

"""Observation:


1. All columns except "age" are categorical.

2. The "survived" variable is binary (0,1).

3. The "sex" variable contains distinct values: "female" and "male".

4. There appears a variable with missing values, particularly in 'age'. This issue will be handle next

4. There are no significant issues found in the data (column names match the entries).



"""

df.info()

"""1. The data contains 4 columns with 500 rows.  
2. Only the **"age"** variable has missing values, which will be processed further.  
3. The **"age"** data contains float values, and values below 1 will be considered as observations with an age of less than 1 year. Need a comfirmation from the source of dataset
4. Otherwise, the data appears to align with the column names.

#Statistical Summary
"""

df.columns

categoric = ['name', 'sex']
numeric = ['survived','age']

df[numeric].describe()

"""1. Overall, the minimum and maximum values seem reasonable for this variable.  
2. The **"age"** variable has a minimum value of 0.6, which can be considered as an age of less than 1 year.  
3. The mean is approximately 50% (Median), indicating that the variable is close to a normal distribution.  
4. The **"survived"** variable is binary (0 and 1), so there is no need to conclude its symmetry. It only needs to be checked for balance.
"""

df[categoric].describe()

"""1. Both name and **sex** columns have 500 entries with no missing values.

2. There are 499 unique names, indicating one duplicate entry: "Eustis, Miss. Elizabeth Mussey", which suggests a potential duplicate that may need further checking.

3. The dataset contains 288 males and 212 females, showing that males are more represented.
"""

#untuk mengetahui berapa banyak gender dan status survived dengan detail
print(df['sex'].value_counts(), '\n')
print(df['survived'].value_counts())

"""

1.   For gender, it is true that "male" appears in more rows than "female".
2.   It shows that most passengers survived, with 270 survivors, while the rest did not.

"""

print(df['age'].value_counts())

"""The **"age"** variable shows that the most common age is 24 years, with 23 passengers, followed by 30 years, with 20 passengers.

#Cleaning Data

##Handling Duplicate
"""

len(df.drop_duplicates())/len(df)
#Hasil menunjukkan bahwa benar terdapat baris yang duplicate

duplicates = df[df.duplicated(keep=False)]
duplicates
#Asumsi seelumnya benar, ada duplicate data pada baris 104 dan baris 349

#Handling Drop duplicate
data = df.drop_duplicates()
len(data.drop_duplicates())/len(data)

#====== Handling Duplicate Data Finish ==============

"""Handling data duplicate telah dilakukan

#Handling Missing Value
"""

data.isna().sum()

# percentage version
total_rows = len(data)

# Menghitung dan menampilkan persentase missing values di setiap kolom satu per satu
for column in data.columns:
    missing_count = data[column].isna().sum()
    missing_percentage = (missing_count / total_rows) * 100
    print(f"Column '{column}' Has {missing_count} missing values ({missing_percentage:.2f}%)") # .2f means 2 decimal

"""Terdapat 49 data missing value pada variabel **age**. Variabel lainnya telah lengkap.

Persentase missing value adalah 9.82% yang dimana berada dibawah 20%. Oleh karena itu, missing value ini dapat kita handling dengan **Median Imputation**, hal ini karena data **age** adalah data numerik
"""

data[column].fillna(data[column].median(), inplace=True)

data.isna().sum()

data.info()

"""**Duplicate** dan** Missing Values** pada data telah berhasil diselesaikan. Pada hasil akhir menunjukkan bahwa data yang bisa digunakan terdapat **499** baris **tanpa adanya missing value**."""